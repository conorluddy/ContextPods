#!/usr/bin/env node

/**
 * {{serverDescription}}
 * Generated by Context-Pods
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';

/**
 * {{serverName}} MCP Server
 */
class {{serverName}}Server {
  private server: Server;

  constructor() {
    this.server = new Server(
      {
        name: '{{serverName}}',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
          resources: {},
        },
      }
    );

    this.setupToolHandlers();
    this.setupResourceHandlers();
  }

  private setupToolHandlers(): void {
    this.server.setRequestHandler('tools/list', async () => {
      return {
        tools: [
          {
            name: 'echo',
            description: 'Echo back the input',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: 'Message to echo back',
                },
              },
              required: ['message'],
            },
          },
        ],
      };
    });

    this.server.setRequestHandler('tools/call', async (request) => {
      const { name, arguments: args } = request.params;

      if (name === 'echo') {
        return {
          content: [
            {
              type: 'text',
              text: `Echo: ${args.message}`,
            },
          ],
        };
      }

      throw new Error(`Unknown tool: ${name}`);
    });
  }

  private setupResourceHandlers(): void {
    this.server.setRequestHandler('resources/list', async () => {
      return {
        resources: [
          {
            uri: 'test://status',
            name: 'Server Status',
            description: 'Current server status',
            mimeType: 'application/json',
          },
        ],
      };
    });

    this.server.setRequestHandler('resources/read', async (request) => {
      const { uri } = request.params;

      if (uri === 'test://status') {
        return {
          contents: [
            {
              uri,
              mimeType: 'application/json',
              text: JSON.stringify({
                status: 'running',
                server: '{{serverName}}',
                timestamp: new Date().toISOString(),
              }),
            },
          ],
        };
      }

      throw new Error(`Unknown resource: ${uri}`);
    });
  }

  async run(): Promise<void> {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
  }
}

// Start the server
const server = new {{serverName}}Server();
server.run().catch(console.error);