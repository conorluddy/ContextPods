use anyhow::{Result, anyhow};
use serde_json::{json, Value};
use tracing::info;

pub fn list_resources() -> Vec<Value> {
    vec![
        json!({
            "uri": "config://settings",
            "name": "Server Settings",
            "description": "Current server configuration",
            "mimeType": "application/json"
        }),
        json!({
            "uri": "info://about",
            "name": "About",
            "description": "Information about {{serverName}}",
            "mimeType": "text/plain"
        }),
    ]
}

pub async fn read_resource(params: Value) -> Result<Value> {
    let uri = params["uri"]
        .as_str()
        .ok_or_else(|| anyhow!("Missing resource URI"))?;
    
    info!("Reading resource: {}", uri);
    
    match uri {
        "config://settings" => {
            Ok(json!({
                "contents": [{
                    "uri": uri,
                    "mimeType": "application/json",
                    "text": serde_json::to_string_pretty(&json!({
                        "name": "{{serverName}}",
                        "version": "0.1.0",
                        "description": "{{serverDescription}}",
                        "rust_edition": "{{rustEdition}}"
                    }))?
                }]
            }))
        }
        "info://about" => {
            Ok(json!({
                "contents": [{
                    "uri": uri,
                    "mimeType": "text/plain",
                    "text": "{{serverName}} - {{serverDescription}}\n\nBuilt with Rust and the MCP SDK\nGenerated by Context-Pods"
                }]
            }))
        }
        _ => Err(anyhow!("Unknown resource: {}", uri)),
    }
}